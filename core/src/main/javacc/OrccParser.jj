
options {
	STATIC = false;
	CHOICE_AMBIGUITY_CHECK = 3;
	FORCE_LA_CHECK = false;
	DEBUG_TOKEN_MANAGER = false;
}



PARSER_BEGIN(OrccParser)
package se.lth.cs.tycho.parsing.orcc;

import java.lang.SuppressWarnings;
import java.util.List;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import java.util.HashMap;
import se.lth.cs.tycho.ir.*;
import se.lth.cs.tycho.ir.expr.pattern.*;
import se.lth.cs.tycho.ir.type.*;
import se.lth.cs.tycho.ir.decl.*;
import se.lth.cs.tycho.ir.expr.*;
import se.lth.cs.tycho.ir.stmt.*;
import se.lth.cs.tycho.ir.stmt.lvalue.*;
import se.lth.cs.tycho.ir.entity.cal.*;
import se.lth.cs.tycho.ir.entity.*;
import se.lth.cs.tycho.ir.util.ImmutableList;
import se.lth.cs.tycho.ir.util.ImmutableEntry;
import se.lth.cs.tycho.parsing.cal.CalParser;

@SuppressWarnings("unused")
public class OrccParser {

	private Map<String, Integer> operatorPriorities = null;

	public void setOperatorPriorities(Map<String, Integer> priorities) {
		operatorPriorities = priorities;
	}

	public static Map<String, Integer> defaultPriorities() {
		Map<String, Integer> prio = new HashMap<String, Integer>();
		prio.put("or", 4);
		prio.put("||", 4);
		prio.put("and", 5);
		prio.put("&&", 5);
		prio.put("|", 6);
		prio.put("^", 7);
		prio.put("&", 8);
		prio.put("=", 9);
		prio.put("!=", 9);
		prio.put("<", 10);
		prio.put("<=", 10);
		prio.put(">", 10);
		prio.put(">=", 10);
		prio.put("..", 11);
		prio.put("in", 11);
		prio.put("<<", 11);
		prio.put(">>", 11);
		prio.put("+", 12);
		prio.put("-", 12);
		prio.put("div", 13);
		prio.put("mod", 13);
		prio.put("*", 13);
		prio.put("/", 13);
		return prio;
	}

	public static class TypeAndName {
		public final TypeExpr type;
		public final String name;
		public TypeAndName(TypeExpr type, String name) {
			this.type = type;
			this.name = name;
		}
	}

	public static class NameAndDef<T> {
		public final String name;
		public final T def;
		public NameAndDef(String name, T def) {
			this.name = name;
			this.def = def;
		}
	}

	private int getPriority(String op) throws ParseException {
		if (operatorPriorities.containsKey(op)) {
			return operatorPriorities.get(op);
		} else {
			throw new ParseException("Unknown binary operation " + op);
		}
	}

	private Expression shuntingYard(ImmutableList<String> operations, ImmutableList<Expression> operands) throws ParseException {
		LinkedList<Expression> out = new LinkedList<Expression>();
		LinkedList<String> ops = new LinkedList<String>();
		int i = 0;
		out.add(operands.get(i));
		while (i < operations.size()) {
			int prec = getPriority(operations.get(i));
			while (!ops.isEmpty() && prec <= getPriority(ops.getLast())) {
				transformOperator(out, ops);
			}
			ops.addLast(operations.get(i));
			i += 1;
			out.add(operands.get(i));
		}
		while (!ops.isEmpty()) {
			transformOperator(out, ops);
		}
		assert out.size() == 1;
		return out.getFirst();
	}

	private void transformOperator(LinkedList<Expression> out, LinkedList<String> ops) {
		String operator = ops.removeLast();
		String function = "$BinaryOperation." + operator;
		Variable funcVar = Variable.variable(function);
		ExprVariable func = new ExprVariable(funcVar);  // use the same Identifier as for funcVar
		Expression right = out.removeLast();
		Expression left = out.removeLast();
		ImmutableList<Expression> args = ImmutableList.of(left, right);
		Expression result = new ExprApplication(func, args);
		out.add(result);
	}

}
PARSER_END(OrccParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


/* Keywords */
TOKEN :
{
	< ACTION: "action" >
|	< ACTOR: "actor" >
|	< BEGIN: "begin" >
|	< CONST: "const" >
|	< DO: "do" >
|	< ELSE: "else" >
|	< ELSIF: "elsif" >
|	< END: "end" >
|	< ENTITY: "entity" >
|	< FALSE: "false" >
|	< FOR: "for" >
|	< FOREACH: "foreach" >
|	< FSM: "fsm" >
|	< FUNCTION: "function" >
|	< GUARD: "guard" >
|	< IF: "if" >
|	< IMPORT: "import" >
|	< IN: "in" >
|	< INITIALIZE: "initialize" >
|	< LET: "let" >
|	< NULL: "null" >
|	< OLD: "old" >
|	< PRIORITY: "priority" >
|	< PROCEDURE: "procedure" >
|	< REPEAT: "repeat" >
|	< SCHEDULE: "schedule" >
|	< THEN: "then" >
|	< TRUE: "true" >
|	< VAR: "var" >
|	< WHILE: "while" >

|	< PACKAGE: "package" >
|	< UNIT: "unit" >

}

/* Delimiters and separators */
TOKEN: {
	< COLON: ":" >
|	< DOT: "." >
|	< COMMA: "," >
|	< LONG_DOUBLE_ARROW_RITHT: "==>" >
|	< LONG_SINGLE_ARROW_RIGHT: "-->" >
|	< LONG_SINGLE_ARROW_LEFT: "<--" >
|	< LPAREN: "(" >
|	< RPAREN: ")" >
|	< LCURLY: "{" >
|	< RCURLY: "}" >
|	< LSQUARE: "[" >
|	< RSQUARE: "]" >
}

/* Operators */
TOKEN: {
	< EQ: "=" >
|	< COLON_EQ: ":=" >
|	< GREATER_THAN: ">" >
|	< STAR: "*" >
|	< DOT_STAR: ".*" >
|	< CINNAMON_BUN: "@" >
|	< ANY_OP: "-" >
|	< BIN_OP: "&" | "|" | "^" | "/" | "div" | "==" | "**" | ">=" | "<=" | "&&" | "and" | "||" | "or" | "<" | "%" | "mod" | "!=" | "+" | "<<" | ">>" | ".." >
|	< UN_OP: "~" | "!" | "not" | "#" >
}

/* String literals */
TOKEN: {
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


/* Numeric literals */
TOKEN: {
	< INTEGER: <DECIMAL_LITERAL> | <HEXADECIMAL_LITERAL> | <OCTAL_LITERAL> >
|
	<REAL:
			(<DECIMAL_DIGIT>)+ "." (<DECIMAL_DIGIT>)+ (<EXPONENT>)?
		|	(<DECIMAL_DIGIT>)+ "." <EXPONENT> >
//|
//	< REAL:
//			(<DECIMAL_DIGIT>)+ "." (<DECIMAL_DIGIT>)* (<EXPONENT>)?
//		|	"." (<DECIMAL_DIGIT>)+ (<EXPONENT>)?
//		|	(<DECIMAL_DIGIT>)+ <EXPONENT> >
|
	< #DECIMAL_LITERAL: <NON_ZERO_DECIMAL_DIGIT> (<DECIMAL_DIGIT>)* >
|
	< #HEXADECIMAL_LITERAL: "0" ["x", "X"] (<HEXADECIMAL_DIGIT>)+ >
|
	< #OCTAL_LITERAL: "0" (<OCTAL_DIGIT>)* >
|
	< #EXPONENT: ["e", "E"] (["+", "-"])? (<DECIMAL_DIGIT>)+ >
|
	< #NON_ZERO_DECIMAL_DIGIT: ["1"-"9"] >
|
	< #DECIMAL_DIGIT: ["0"-"9"] >
|
	< #OCTAL_DIGIT: ["0"-"7"] >
|
	< #HEXADECIMAL_DIGIT: ["0"-"9", "a"-"f", "A"-"F"] >
}


/* Identifies */
TOKEN: {
	< ID: (["a"-"z", "A"-"Z", "_", "$", "0"-"9"])+ >
}


QID NamespaceScan() :
{
	QID qid = QID.empty();
	Token unitId;
}
{
	(
		"package"
		qid = QID()
		";"
		(
			"import"
			QID()
			(".*" | "." "*")?
			";"
		)*
		(
			"unit"
			unitId = <ID>
			":"
			{
				qid = qid.concat(QID.of(unitId.image));
			}
		)?
	)?
	{
		return qid;
	}
}


NamespaceDecl CompilationUnit() :
{
	NamespaceDecl ns;
	ImmutableList.Builder<GlobalVarDecl> varDecls = ImmutableList.builder();
	ImmutableList.Builder<GlobalEntityDecl> entityDecls = ImmutableList.builder();
	ImmutableList.Builder<Import> imports = ImmutableList.builder();
	GlobalVarDecl varDecl;
	GlobalEntityDecl e;
	NamespaceDecl unit;
	Import imp;
	QID qid = QID.empty();
}
{
	(
		"package"
		qid = QID()
		";"
	)?
	(
		imp = Import() { imports.add(imp); }
	)*
	(
		unit = OrccUnit()
		{
			qid = qid.concat(unit.getQID());
			varDecls.addAll(unit.getVarDecls());
		}
	|
		e = ActorDecl()  { entityDecls.add(e); }
	)
	<EOF>
	{
		NamespaceDecl pkg = new NamespaceDecl(qid, imports.build(), varDecls.build(), entityDecls.build(), ImmutableList.empty());
		return pkg;
	}
}

NamespaceDecl OrccUnit() :
{
	Token id;
	ImmutableList.Builder<GlobalVarDecl> decls = ImmutableList.builder();
	GlobalVarDecl decl;
}
{
	"unit"
	id = <ID>
	":"
	(
		decl = GlobalVarDecl()
		{ decls.add(decl); }
	)*
	"end"
	{
		return new NamespaceDecl(
				QID.of(id.image),
				ImmutableList.empty(),
				decls.build(),
				ImmutableList.empty(),
				ImmutableList.empty());
	}
}

Annotation Annotation() :
{
	Token id;
	Token par;
	ImmutableList.Builder<AnnotationParameter> parameters = ImmutableList.builder();
	AnnotationParameter parameter;
}
{
	"@" id = <ID>
	(
		"("
		(
			parameter = AnnotationParameter() {parameters.add(parameter);}
			("," parameter = AnnotationParameter() {parameters.add(parameter);})*
		)?
		")"
	)?
	{ return new Annotation(id.image, parameters.build()); }
}

AnnotationParameter AnnotationParameter() :
{
	Token id;
	Expression expression = null;
	AnnotationParameter parameter;
}
{
(
	LOOKAHEAD(2)
	id=<ID> "=" expression=Expression() {parameter = new AnnotationParameter(id.image, expression);}
|
	expression=Expression() {parameter = new AnnotationParameter(null, expression);}
)
	{
        return parameter;
    }
}


QID QID() :
{
	QID qid;
	Token id;
}
{
	id = <ID> { qid = QID.of(id.image); }
	(
		LOOKAHEAD(2)
		"."
		id = <ID> { qid = qid.concat(QID.of(id.image)); }
	)*
	{ return qid; }
}

GlobalVarDecl GlobalVarDecl() :
{
	ImmutableList.Builder<Annotation> annotations = ImmutableList.builder();
    Annotation ann;
	Availability availability = Availability.PUBLIC;
	String name;
	TypeExpr type = null;
	Expression expr;
	boolean external = false;
}
{
	(
		ann = Annotation()
		{
			if (ann.getName().equals("native")) {
				external = true;
			}
			annotations.add(ann);
		}
	)*
	(
		{ TypeAndName typeName; }
		typeName = VarDeclTypeName()
		"="
		expr = Expression()
		";"
		{ name = typeName.name; type = typeName.type; }
	|
		{ NameAndDef<ExprLambda> fun; }
		fun = FunDecl()
		{
			name = fun.name;
			if (external && fun.def != null) {
				type = CalParser.lambdaToType(fun.def);
				expr = null;
			} else {
				expr = fun.def;
			}
		}
	|
		{ NameAndDef<ExprProc> proc; }
		proc = ProcDecl()
		{
			name = proc.name;
			if (external && proc.def != null) {
				type = CalParser.procToType(proc.def);
				expr = null;
			} else {
				expr = proc.def;
			}
		}
	)
	{
		return VarDecl.global(annotations.build(), availability, type, name, expr).asExternal(external);
	}
}


LocalVarDecl LocalVarDecl(boolean endWithSemicolon) :
{
    ImmutableList.Builder<Annotation> annotations = ImmutableList.builder();
    Annotation ann;
	boolean external = false;
	TypeExpr type = null;
	String name;
	Expression expr = null;
	boolean assignable = true;
}
{
	(
		ann = Annotation()
		{
			if (ann.getName().equals("native")) {
				external = true;
			}
			annotations.add(ann);
		}
	)*
	(
		{ TypeAndName typeName; }
		typeName = VarDeclTypeName()
		(
			( "=" { assignable = false; } | ":=" { assignable = true; } )
			expr = Expression()
		)?
		(
			LOOKAHEAD({endWithSemicolon})
			";"
		)?
		{ name = typeName.name; type = typeName.type; }
	|
		{ NameAndDef<ExprLambda> fun; }
		fun = FunDecl()
		{ name = fun.name; expr = fun.def; assignable = false; }
	|
		{ NameAndDef<ExprProc> proc; }
		proc = ProcDecl()
		{ name = proc.name; expr = proc.def; assignable = false; }
	)
	{
		return VarDecl.local(annotations.build(), type, name, expr, !assignable).asExternal(external);
	}
}

Import Import() :
{
	QID qid;
	boolean groupImport = false;
}
{
	"import"
	qid = QID()
	(".*" {groupImport = true;} | "." "*" {groupImport = true;} )?
	";"
	{
		if (groupImport) {
			return new GroupImport(Import.Kind.VAR, qid);
		} else {
			return new SingleImport(Import.Kind.VAR, qid, qid.getLast().toString());
		}
	}
}


NameAndDef<ExprLambda> FunDecl() :
{
	Token id;
	ImmutableList<ParameterVarDecl> valPars;
	ImmutableList<LocalVarDecl> varDecls = ImmutableList.empty();
	Expression expr = null;
	TypeExpr type = null;
}
{
	"function"
	id = <ID>
	"("
	valPars = FormalValuePars()
	")"
	(
		"-->"
		type = Type()
	)?
	(
		"var"
		varDecls = VarDecls()
	)?
	(
		":"
		expr = Expression()
		"end"
	|
		";"
	|
		"end"
	)
	{
		if (!varDecls.isEmpty()) {
			expr = new ExprLet(ImmutableList.empty(), varDecls, expr);
		}
		ExprLambda lambda = new ExprLambda(valPars, expr, type);
		return new NameAndDef<ExprLambda>(id.image, lambda);
	}
}

NameAndDef<ExprProc> ProcDecl() :
{
	Token id;
	ImmutableList<ParameterVarDecl> valPars;
	ImmutableList<LocalVarDecl> varDecls = ImmutableList.empty();
	ImmutableList<Statement> stmts = ImmutableList.empty();
}
{
	"procedure"
	id = <ID>
	"("
	valPars = FormalValuePars()
	")"
	(
		"var"
		varDecls = VarDecls()
	)?
	(
		"begin"
		stmts = Statements()
		"end"
	|
		"end"
	|
		";"
	)
	{
		StmtBlock block = new StmtBlock(ImmutableList.empty(), varDecls, stmts);
		ExprProc proc = new ExprProc(valPars, ImmutableList.of(block));
		return new NameAndDef<ExprProc>(id.image, proc);
	}
}

ImmutableList<LocalVarDecl> VarDecls() :
{
	ImmutableList.Builder<LocalVarDecl> builder = ImmutableList.builder();
	LocalVarDecl decl;
}
{
	(
		decl = LocalVarDecl(false) { builder.add(decl); }
		( "," decl = LocalVarDecl(false) { builder.add(decl); })*
	)?
	{
		return builder.build();
	}
}

/* ActorDecl */
GlobalEntityDecl ActorDecl() :
{
	Token id;
	String name;
	ImmutableList.Builder<Annotation> annotations = ImmutableList.builder();
	ImmutableList.Builder<Annotation> bodyAnnotations = ImmutableList.builder();
	ImmutableList<ParameterTypeDecl> typePars = ImmutableList.empty();
	ImmutableList<ParameterVarDecl> valuePars;
	ImmutableList<TypeDecl> typeDecls = ImmutableList.empty();
	ImmutableList.Builder<LocalVarDecl> varDecls = ImmutableList.builder();
	LocalVarDecl varDecl;
	ImmutableList<PortDecl> inputPorts = ImmutableList.empty();
	ImmutableList<PortDecl> outputPorts = ImmutableList.empty();
	ImmutableList.Builder<Action> initializers = ImmutableList.builder();
	ImmutableList.Builder<Action> actions = ImmutableList.builder();
	Action action;
	ImmutableList<ActionCase> actionCases = ImmutableList.empty();
    ImmutableList<ActionGeneratorStmt> actionGeneratorStmts = ImmutableList.empty();
	ScheduleFSM scheduleFSM = null;
	ImmutableList.Builder<ImmutableList<QID>> priorities = ImmutableList.builder();
	ImmutableList.Builder<Expression> invariants = ImmutableList.builder();
	boolean external = false;
	Annotation ann;
}
{
	(
        ann = Annotation()
        {
            if (ann.getName().equals("native")) {
                external = true;
            }
            annotations.add(ann);
        }
    )*
	"actor"
	id = <ID> { name = id.image; }
	"("
	valuePars = FormalValuePars()
	")"
	inputPorts = PortDecls()
	"==>"
	outputPorts = PortDecls()
	(
		":"
		(
			(
				LOOKAHEAD(( Annotation() )* (QID() ":")? "action")
				action = Action()
				{ actions.add(action); }
			|
				LOOKAHEAD(( Annotation() )* (QID() ":")? "initialize")
				action = InitializationAction()
				{ initializers.add(action); }
			|
				varDecl = LocalVarDecl(true)
				{ varDecls.add(varDecl); }
			|
				PriorityOrder(priorities)
			|
				{
					if (scheduleFSM != null) {
						throw new ParseException("Only one action schedule or process description is allowed.");
					}
				}
				scheduleFSM = ActionSchedule()
			)
		)*
		"end"
	)
	{
		CalActor a = new CalActor(annotations.build(), typePars, valuePars, typeDecls, varDecls.build(), inputPorts, outputPorts, initializers.build(), actions.build(), actionCases, actionGeneratorStmts, scheduleFSM, null, null, priorities.build(), invariants.build());
		return GlobalEntityDecl.global(Availability.PUBLIC, name, a, external);
	}
}


ImmutableList<PortDecl> PortDecls() :
{
	ImmutableList.Builder<PortDecl> decls = ImmutableList.builder();
	PortDecl decl;
}
{
	(
		decl = PortDecl() { decls.add(decl); }
		(
			","
			decl = PortDecl() { decls.add(decl); }
		)*
	)?
	{ return decls.build(); }
}

PortDecl PortDecl() :
{
	TypeExpr type = null;
	Token id;
}
{
	(Annotation())*
	type = Type()
	id = <ID>
	{ return new PortDecl(id.image, type); }
}

/* Actions */

Action Action() :
{
	QID tag = null;
	ImmutableList.Builder<Annotation> annotations = ImmutableList.builder();
	ImmutableList<InputPattern> inputPatterns;
	ImmutableList<OutputExpression> outputExpressions;
	ImmutableList<TypeDecl> typeDecls = ImmutableList.empty();
	ImmutableList<LocalVarDecl> varDecls = ImmutableList.empty();
	ImmutableList<Expression> guards = ImmutableList.empty();
	ImmutableList<Statement> body = ImmutableList.empty();
	Expression delay = null;
	Annotation annotation;
	ImmutableList<Expression> preconditions = ImmutableList.empty();
	ImmutableList<Expression> postconditions = ImmutableList.empty();
}
{
    ( annotation = Annotation() {annotations.add(annotation);} )*
	( tag = QID() ":" )?
	"action"
	inputPatterns = InputPatterns()
	"==>"
	outputExpressions = OutputExpressions()
	("guard" guards = ExpressionList())?
	("var" varDecls = VarDecls())?
	("do" body = Statements())?
	"end"
	{
		return new Action(tag, annotations.build(), inputPatterns, outputExpressions, typeDecls, varDecls, guards, body, delay, preconditions, postconditions);
	}
}

Action InitializationAction() :
{
	QID tag = null;
	ImmutableList.Builder<Annotation> annotations = ImmutableList.builder();
	ImmutableList<InputPattern> inputPatterns = ImmutableList.empty();
	ImmutableList<OutputExpression> outputExpressions;
	ImmutableList<TypeDecl> typeDecls = ImmutableList.empty();
	ImmutableList<LocalVarDecl> varDecls = ImmutableList.empty();
	ImmutableList<Expression> guards = ImmutableList.empty();
	ImmutableList<Statement> body = ImmutableList.empty();
	Expression delay = null;
	Annotation annotation;
	ImmutableList<Expression> preconditions = ImmutableList.empty();
	ImmutableList<Expression> postconditions = ImmutableList.empty();
}
{
	( annotation = Annotation() {annotations.add(annotation);} )*
	( tag = QID() ":" )?
	"initialize"
	"==>"
	outputExpressions = OutputExpressions()
	("guard" guards = ExpressionList())?
	("var" varDecls = VarDecls())?
	("do" body = Statements())?
	"end"
	{
		return new Action(tag, annotations.build(), inputPatterns, outputExpressions, typeDecls, varDecls, guards, body, delay, preconditions, postconditions);
	}
}

ImmutableList<InputPattern> InputPatterns() :
{
	ImmutableList.Builder<InputPattern> builder = ImmutableList.builder();
	InputPattern in;
}
{
	(
		in = InputPattern() { builder.add(in); }
		("," in = InputPattern() { builder.add(in); })*
	)?
	{ return builder.build(); }
}

InputPattern InputPattern() :
{
	Token id;
	Port port = null;
	Match match;
	ImmutableList.Builder<Match> matches = ImmutableList.builder();
	Expression repeat = null;
}
{
	( id = <ID> ":" { port = new Port(id.image); })?
	"["
	(
		match = Match() { matches.add(match); }
		("," match = Match() { matches.add(match); } )*
	)?
	"]"
	("repeat" repeat = Expression())?
	{ return new InputPattern(port, matches.build(), repeat, null); }
}

Match Match() :
{
    Pattern pattern;
}
{

    pattern = Pattern()
    {
        InputVarDecl declaration = new InputVarDecl();
        Expression scrutinee = new ExprVariable(Variable.variable(declaration.getName()));
        scrutinee.setPosition(pattern, pattern);
        ExprCase.Alternative alternative = new ExprCase.Alternative(pattern, Collections.emptyList(), new ExprLiteral(ExprLiteral.Kind.True));
        alternative.setPosition(pattern, pattern);
        ExprCase.Alternative otherwise = new ExprCase.Alternative(new PatternWildcard(), Collections.emptyList(), new ExprLiteral(ExprLiteral.Kind.False));
        ExprCase casee = new ExprCase(scrutinee, Arrays.asList(alternative, otherwise));
        casee.setPosition(pattern, pattern);
        return new Match(declaration, casee);
    }
}

Pattern Pattern():
{
    Token id;
}
{
    id = <ID>
    {
        PatternVarDecl decl = new PatternVarDecl(id.image);
        decl.setPosition(id.beginLine, id.beginColumn, id.endLine, id.endColumn);
        PatternBinding pattern = new PatternBinding(decl);
        pattern.setPosition(decl, decl);
        return pattern;
    }
}

ImmutableList<OutputExpression> OutputExpressions() :
{
	ImmutableList.Builder<OutputExpression> builder = ImmutableList.builder();
	OutputExpression out;
}
{
	(
		out = OutputExpression() { builder.add(out); }
		("," out = OutputExpression() { builder.add(out); })*
	)?
	{ return builder.build(); }
}

OutputExpression OutputExpression() :
{
	Token id;
	Port port = null;
	ImmutableList<Expression> exprs;
	Expression repeat = null;
}
{
	( id = <ID> ":" { port = new Port(id.image); })?
	"["
	exprs = ExpressionList()
	"]"
	( "repeat" repeat = Expression() )?
	{
		return new OutputExpression(port, exprs, repeat, null);
	}
}

/* Action control */
ScheduleFSM ActionSchedule() :
{
	Token init;
	ImmutableList<Transition> trans;
}
{
	"schedule"
	"fsm"
	init = <ID>
	":"
	trans = StateTransitions()
	"end"
	{ return new ScheduleFSM(trans, init.image); }
}

ImmutableList<Transition> StateTransitions() :
{
	ImmutableList.Builder<Transition> builder = ImmutableList.builder();
}
{
	(StateTransition(builder) ";")*
	{ return builder.build(); }
}

void StateTransition(ImmutableList.Builder<Transition> builder) :
{
	Token src;
	Token dst;
	QID qid;
	ImmutableList.Builder<QID> tags = ImmutableList.builder();
}
{
	src = <ID>
	"("
	qid = QID() { tags.add(qid); }
	( "," qid = QID() { tags.add(qid); } )*
	")"
	"-->"
	dst = <ID>
	{ builder.add(new Transition(src.image, dst.image, tags.build())); }
}

void PriorityOrder(ImmutableList.Builder<ImmutableList<QID>> prio) :
{
	ImmutableList.Builder<QID> seq;
	QID qid;
}
{
	"priority"
	(
		{ seq = ImmutableList.builder(); }
		qid = QID() { seq.add(qid); }
		">"
		qid = QID() { seq.add(qid); }
		(
			">"
			qid = QID() { seq.add(qid); }
		)*
		";"
		{ prio.add(seq.build()); }
	)*
	"end"
}

/* Expressions */

Expression Expression() :
{
	Expression expr;
	String op;
	ImmutableList.Builder<String> ops = ImmutableList.builder();
	ImmutableList.Builder<Expression> exprs = ImmutableList.builder();
}
{
	expr = UnaryOperation() { exprs.add(expr); }
	(
		op = BinaryOperator()
		expr = UnaryOperation()
		{ ops.add(op); exprs.add(expr); }
	)*
	{
		ImmutableList<String> opList = ops.build();
		ImmutableList<Expression> exprList = exprs.build();
		if (opList.isEmpty()) {
			return expr;
		} else {
			if (operatorPriorities == null) {
				ExprBinaryOp result = new ExprBinaryOp(opList, exprList);
				Expression first = exprList.get(0);
				Expression last = exprList.get(exprList.size()-1);
				if (first.hasPosition() && last.hasPosition()) {
					result.setPosition(first.getFromLineNumber(), first.getFromColumnNumber(), last.getToLineNumber(), last.getToColumnNumber());
				}
				return result;
			} else {
				return shuntingYard(opList, exprList);
			}
		}
	}
}

Expression UnaryOperation() :
{
	String op;
	List<String> ops = new ArrayList<String>();
	Expression expr;
}
{
	(
		op = UnaryOperator()
		{ ops.add(op); }
	)*
	expr = PrimaryExpression()
	{
		Collections.reverse(ops);
		for (String o : ops) {
			if (operatorPriorities != null) {
				String funcName = "$UnaryOperation." + o;
				ExprVariable func = new ExprVariable(Variable.variable(funcName));
				expr = new ExprApplication(func, ImmutableList.of(expr));
			} else {
				expr = new ExprUnaryOp(o, expr);
			}
		}
		return expr;
	}
}

Expression PrimaryExpression() :
{
	Expression expr;
	ImmutableList<Expression> args;
	Expression index;
	Token l, r;
}
{
	l = <LPAREN>
	expr = Expression()
	r = <RPAREN>
	{ expr.setPosition(l.beginLine, l.beginColumn, r.endLine, r.endColumn); }
	{ return expr; }
|
	(Annotation())*
	(
		expr = VariableExpression()
		(
			"(" args = ExpressionList() ")"
			{ expr = new ExprApplication(expr, args); }
		|
			"["
			index = Expression()
			{ expr = new ExprIndexer(expr, index); }
			"]"
		)*
	|
		expr = ExpressionLiteral()
	|
		expr = IfExpression()
	|
		expr = LetExpression()
	|
		expr = ListExpression()
	)
	{ return expr; }
}

ExprVariable VariableExpression() :
{
	Variable var;
}
{
	var = Variable()
	{
		ExprVariable result = new ExprVariable(var);
		result.setPosition(var, var);
		return result;
	}
}

Variable Variable() :
{
	Token id;
}
{
	id = <ID>
	{
		Variable result = Variable.variable(id.image);
		result.setPosition(id.beginLine, id.beginColumn, id.endLine, id.endColumn);
		return result;
	}
}

ExprLiteral ExpressionLiteral() :
{
	Token lit;
	ExprLiteral result;
}
{
	(
		lit = <INTEGER> { result = new ExprLiteral(ExprLiteral.Kind.Integer, lit.image); }
	|
		lit = <REAL> { result = new ExprLiteral(ExprLiteral.Kind.Real, lit.image); }
	|
		lit = <TRUE> { result = new ExprLiteral(ExprLiteral.Kind.True); }
	|
		lit = <FALSE> { result = new ExprLiteral(ExprLiteral.Kind.False); }
	|
		lit = <NULL> { result = new ExprLiteral(ExprLiteral.Kind.Null); }
	|
    	lit = <CHARACTER_LITERAL> { result = new ExprLiteral(ExprLiteral.Kind.Char, lit.image); }
	|
		lit = <STRING_LITERAL> { result = new ExprLiteral(ExprLiteral.Kind.String, lit.image); }
	)
	{
		result.setPosition(lit.beginLine, lit.beginColumn, lit.endLine, lit.endColumn);
		return result;
	}
}


ImmutableList<Expression> ExpressionList() :
{
	ImmutableList.Builder<Expression> list = ImmutableList.builder();
	Expression expr;
}
{
	(
		expr = Expression()
		{ list.add(expr); }
		(
			","
			expr = Expression()
			{ list.add(expr); }
		)*
	)?
	{
		return list.build();
	}
}

String BinaryOperator() :
{
	Token op;
}
{
	(
		op = <BIN_OP> | op = <ANY_OP> | op = "*" | op = ">" | op = "="
	)
	{ return op.image; }
}

String UnaryOperator() :
{
	Token op;
}
{
	(
		op = <UN_OP> | op = <ANY_OP>
	)
	{ return op.image; }
}


ExprIf IfExpression() :
{
	Expression cond;
	Expression thenExpr;
	Expression elseExpr;
}
{
	"if" cond = Expression()
	"then" thenExpr = Expression()
	(
		elseExpr = ElseIfExpression()
	|
		"else" elseExpr = Expression()
	)
	"end"
	{
		return new ExprIf(cond, thenExpr, elseExpr);
	}
}

ExprIf ElseIfExpression() :
{
	Expression cond;
	Expression thenExpr;
	Expression elseExpr;
}
{
	"elsif"
	cond = Expression()
	"then"
	thenExpr = Expression()
	(
		elseExpr = ElseIfExpression()
	|
		"else"
		elseExpr = Expression()
	)
	{
		return new ExprIf(cond, thenExpr, elseExpr);
	}
}

ExprLet LetExpression() :
{
	ImmutableList<TypeDecl> typeDecls = ImmutableList.empty();
	ImmutableList<LocalVarDecl> varDecls;
	Expression expr;
}
{
	"let"
	varDecls = VarDecls()
	":"
	expr = Expression()
	"end"
	{ return new ExprLet(typeDecls, varDecls, expr); }
}

ImmutableList<ParameterVarDecl> FormalValuePars() :
{
	ImmutableList.Builder<ParameterVarDecl> builder = ImmutableList.builder();
	ParameterVarDecl decl;
}
{
	(
		decl = FormalValueParameter() { builder.add(decl); }
		( "," decl = FormalValueParameter() { builder.add(decl); } )*
	)?
	{
		return builder.build();
	}
}

ParameterVarDecl FormalValueParameter() :
{
	TypeAndName typeName;
	Expression defaultValue = null;
}
{
	typeName = VarDeclTypeName()
	("=" defaultValue = Expression())?
	{
		return VarDecl.parameter(ImmutableList.empty(), typeName.type, typeName.name, defaultValue);
	}
}


Expression ListExpression() :
{
	Expression result;
	ImmutableList<Expression> exprs;
}
{
	"["
	exprs = ExpressionList()
	{ result = new ExprList(exprs); }
	(
		":"
		result = ComprehensionFor(result)
	)?
	"]"
	{
		return result;
	}
}

Expression ComprehensionFor(Expression contents) :
{
	TypeExpr type = null;
	Token id;
	ImmutableList.Builder<GeneratorVarDecl> varDecls = ImmutableList.builder();
	Expression collection;
	Expression filter;
	ImmutableList.Builder<Expression> filters = ImmutableList.builder();
}
{
	"for"
	type = Type()
	id = <ID>
	{
		varDecls.add(VarDecl.generator(id.image));
	}
	(
		","
		id = <ID>
		{
			varDecls.add(VarDecl.generator(id.image));
		}
	)*
	"in"
	collection = Expression()
	(
		LOOKAHEAD(2)
		","
		filter = Expression()
		{ filters.add(filter); }
	)*
	(
		","
		contents = ComprehensionFor(contents)
	)?
	{
		return new ExprComprehension(new Generator(type, varDecls.build(), collection), filters.build(), contents);
	}
}


/* Type expressions */
TypeExpr Type() :
{
	Token name;
	Token attr;
	TypeExpr typeAttr;
	Expression exprAttr;
	ImmutableList.Builder<ValueParameter> vals = ImmutableList.builder();
	ImmutableList.Builder<TypeParameter> types = ImmutableList.builder();
	TypeExpr type;
	Expression size;
}
{
	name = <ID>
	(
		"("
		attr = <ID>
		(
			":" typeAttr = Type()
			{ types.add(new TypeParameter(attr.image, typeAttr)); }
		|
			"=" exprAttr = Expression()
			{ vals.add(new ValueParameter(attr.image, exprAttr)); }
		)
		(
			","
			attr = <ID>
			(
				":" typeAttr = Type()
				{ types.add(new TypeParameter(attr.image, typeAttr)); }
			|
				"=" exprAttr = Expression()
				{ vals.add(new ValueParameter(attr.image, exprAttr)); }
			)

		)*
		")"
		{
			return new NominalTypeExpr(name.image, types.build(), vals.build());
		}
	)?

	{ type = new NominalTypeExpr(name.image, ImmutableList.empty(), ImmutableList.empty()); }
	{ return type; }
}


TypeAndName VarDeclTypeName() :
{
	Token id;
	TypeExpr type;
	Expression size;
}
{
	type = Type()
	id = <ID>
	{
		LinkedList<Expression> arraySize = new LinkedList<Expression>();
	}
	(
		"["
		size = Expression()
		"]"
		{ arraySize.addFirst(size); }
	)*
	{
		for (Expression sz : arraySize) {
			type = new NominalTypeExpr("List",
					ImmutableList.of(new TypeParameter("type", type)),
					ImmutableList.of(new ValueParameter("size", sz)));
		}
	}
	{ return new TypeAndName(type, id.image); }
}


/* Statements */
Statement Statement() :
{
	Statement stmt;
	ImmutableList.Builder<Annotation> annotations = ImmutableList.builder();
    Annotation annotation;
}
{
	( annotation = Annotation() {annotations.add(annotation);} )*
	(
		LOOKAHEAD(<ID> ("[" | ":="))
		stmt = AssignmentStmt()
	|
		stmt = IfStmt()
	|
		stmt = CallStmt()
	|
		stmt = BlockStmt()
	|
		stmt = WhileStmt()
	|
		stmt = ForeachStmt()
	)
	{
		return (stmt != null) ? stmt.withAnnotations(annotations.build()) : null;
	}
}

ImmutableList<Statement> Statements() :
{
	ImmutableList.Builder<Statement> stmts = ImmutableList.builder();
	Statement stmt;
}
{
	( stmt = Statement() { stmts.add(stmt); } )*
	{ return stmts.build(); }
}


StmtAssignment AssignmentStmt() :
{
	LValue lvalue;
	Expression rvalue;
	Token end;
}
{
	lvalue = LValue()
	":="
	rvalue = Expression()
	end = ";"
	{
		StmtAssignment result = new StmtAssignment(lvalue, rvalue);
		result.setPosition(lvalue.getFromLineNumber(), lvalue.getFromColumnNumber(), end.endLine, end.endColumn);
		return result;
	}
}

LValue LValue() :
{
	Variable var;
	Expression index;
	LValue lvalue;
	Token end;
}
{
	var = Variable()
	{
		lvalue = new LValueVariable(var);
		lvalue.setPosition(var, var);
	}
	(
		"["
		index = Expression()
		end = "]"
		{
			lvalue = new LValueIndexer(lvalue, index);
			lvalue.setPosition(var.getFromLineNumber(), var.getFromColumnNumber(), end.endLine, end.endColumn);
		}
	)*
	{
		return lvalue;
	}
}

StmtCall CallStmt() :
{
	Expression proc;
	ImmutableList<Expression> args;
}
{
	proc = VariableExpression()
	"("
	args = ExpressionList()
	")"
	";"
	{
		return new StmtCall(proc, args);
	}
}

StmtBlock BlockStmt() :
{
	ImmutableList<LocalVarDecl> varDecls = ImmutableList.empty();
	ImmutableList<Statement> stmts;
}
{
	"begin"
	(
		"var"
		varDecls = VarDecls()
		"do"
	)?
	stmts = Statements()
	"end"
	{
		return new StmtBlock(ImmutableList.empty(), varDecls, stmts);
	}
}

StmtIf IfStmt() :
{
	Expression cond;
	ImmutableList<Statement> thenStmts;
	ImmutableList<Statement> elseStmts = null;
}
{
	"if"
	cond = Expression()
	"then"
	thenStmts = Statements()
	(
		elseStmts = ElseIfStmt()
	|
		"else"
		elseStmts = Statements()
	)?
	"end"
	{
		return new StmtIf(cond, thenStmts, elseStmts);
	}
}

ImmutableList<Statement> ElseIfStmt() :
{
	Expression cond;
	Statement thenStmt;
	ImmutableList<Statement> thenStmts;
	Statement elseStmt;
	ImmutableList<Statement> elseStmts = null;
}
{
	"elsif"
	cond = Expression()
	"then"
	thenStmts = Statements()
	(
		elseStmts = ElseIfStmt()
	|
		"else"
		elseStmts = Statements()
	)?
	{
		return ImmutableList.of(new StmtIf(cond, thenStmts, elseStmts));
	}
}

StmtWhile WhileStmt() :
{
	Expression cond;
	ImmutableList<LocalVarDecl> varDecls = ImmutableList.empty();
	ImmutableList<Statement> statements;
}
{
	"while"
	cond = Expression()
	(
		"var"
		varDecls = VarDecls()
	)?
	"do"
	statements = Statements()
	"end"
	{
		if (varDecls.isEmpty()) {
			return new StmtWhile(cond, statements);
		} else {
			return new StmtWhile(cond, ImmutableList.of(new StmtBlock(ImmutableList.empty(), varDecls, statements)));
		}
	}
}

StmtForeach ForeachStmt() :
{
	StmtForeach stmt;
}
{
	stmt = ForeachStmtHeader()
	"end"
	{
		return stmt;
	}
}

StmtForeach ForeachStmtHeader() :
{
	TypeExpr type = null;
	Token id;
	ImmutableList.Builder<GeneratorVarDecl> varDecls = ImmutableList.builder();
	Expression collection;
	Expression filter;
	ImmutableList.Builder<Expression> filters = ImmutableList.builder();
	ImmutableList<Statement> body;
}
{
	"foreach"
	type = Type()
	id = <ID>
	{ varDecls.add(VarDecl.generator(id.image)); }
	(
		","
		id = <ID>
		{ varDecls.add(VarDecl.generator(id.image)); }
	)*
	"in"
	 collection = Expression()
	(
		LOOKAHEAD(2)
		","
		filter = Expression()
		{ filters.add(filter); }
	)*
	body = ForeachStmtBody()
	{
		return new StmtForeach(new Generator(type, varDecls.build(), collection), filters.build(), body);
	}
}

ImmutableList<Statement> ForeachStmtBody() :
{
	Statement result;
	ImmutableList<LocalVarDecl> varDecls = null;
	ImmutableList<Statement> stmts;
}
{
	"," result = ForeachStmtHeader()
	{
		return ImmutableList.of(result);
	}
|
	(
		"var"
		varDecls = VarDecls()
	)?
	"do"
	stmts = Statements()
	{
		if (varDecls == null) {
			return stmts;
		} else {
			return ImmutableList.of(new StmtBlock(ImmutableList.empty(), varDecls, stmts));
		}
	}
}

