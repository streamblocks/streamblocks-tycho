// Actor that takes in one token from each input port, sums them up and outputs the sum as a token on a single
// output port.
//
// This actor tests MultiportSelectors in the InputPatterns. This particular actor tests repeat action on the input port
// Ensuring that the pattern 'a' becomes a nested list as expected.
actor SumInputsRepeat (uint nPorts, uint nRepeat) int(size=8) In[nPorts] ==> int(size=8) Out:
	port1action: action In[0..nPorts-1]:[a] repeat nRepeat ==> Out:[outValue]
	var
	    int(size=8) outValue := 0
	do
        foreach uint i in 0..nPorts-1 do
            foreach uint j in 0..nRepeat-1 do
                outValue := a[i][j] + outValue;
            end
        end
	end
end

network SumInputsRepeatWrapper ()
    int(size=8) In[3]
    ==>
    int(size=8) Out:
entities
	sumInputs = SumInputsRepeat(nPorts=3, nRepeat=2);
structure
    In[0] --> sumInputs.In[0];
    In[1] --> sumInputs.In[1];
    In[2] --> sumInputs.In[2];
    sumInputs.Out --> Out;
end